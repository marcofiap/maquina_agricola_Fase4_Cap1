"""
Configura√ß√µes do sistema usando vari√°veis de ambiente
Farm Tech Solutions - FIAP Fase 4 Cap 1
"""

import os

# Tenta carregar vari√°veis do arquivo .env se o m√≥dulo dotenv estiver dispon√≠vel
try:
    from dotenv import load_dotenv
    load_dotenv()
    print("‚úÖ Vari√°veis de ambiente carregadas do .env")
except ImportError:
    print("‚ÑπÔ∏è python-dotenv n√£o instalado. Usando apenas vari√°veis de ambiente do sistema.")

class Settings:
    """Configura√ß√µes do sistema que podem ser sobrescritas por vari√°veis de ambiente."""
    
    # Configura√ß√µes do PostgreSQL
    POSTGRES_HOST = os.getenv('POSTGRES_HOST', '52.86.250.115')
    POSTGRES_PORT = int(os.getenv('POSTGRES_PORT', '5432'))
    POSTGRES_DB = os.getenv('POSTGRES_DB', 'fiap')
    POSTGRES_USER = os.getenv('POSTGRES_USER', 'fiap')
    POSTGRES_PASSWORD = os.getenv('POSTGRES_PASSWORD', 'fiap123456')
    POSTGRES_SCHEMA = os.getenv('POSTGRES_SCHEMA', 'Fase4Cap1')
    
    # Configura√ß√µes do Flask
    FLASK_HOST = os.getenv('FLASK_HOST', '0.0.0.0')
    FLASK_PORT = int(os.getenv('FLASK_PORT', '8000'))
    FLASK_DEBUG = os.getenv('FLASK_DEBUG', 'True').lower() == 'true'
    
    # Configura√ß√µes do ESP32
    ESP32_SERVERS = os.getenv('ESP32_SERVERS', '192.168.0.12:8000,192.168.2.126:8000').split(',')
    
    # Configura√ß√µes de logging
    LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
    LOG_FILE = os.getenv('LOG_FILE', 'farm_tech.log')
    
    @classmethod
    def get_postgres_url(cls):
        """Retorna URL de conex√£o PostgreSQL."""
        return f"postgresql://{cls.POSTGRES_USER}:{cls.POSTGRES_PASSWORD}@{cls.POSTGRES_HOST}:{cls.POSTGRES_PORT}/{cls.POSTGRES_DB}"
    
    @classmethod
    def get_connection_params(cls):
        """Retorna par√¢metros de conex√£o como dicion√°rio."""
        return {
            'host': cls.POSTGRES_HOST,
            'port': cls.POSTGRES_PORT,
            'database': cls.POSTGRES_DB,
            'user': cls.POSTGRES_USER,
            'password': cls.POSTGRES_PASSWORD
        }
    
    @classmethod
    def print_config(cls):
        """Imprime configura√ß√£o atual (sem mostrar senha)."""
        print("üîß CONFIGURA√á√ÉO ATUAL:")
        print(f"   PostgreSQL: {cls.POSTGRES_USER}@{cls.POSTGRES_HOST}:{cls.POSTGRES_PORT}/{cls.POSTGRES_DB}")
        print(f"   Schema: {cls.POSTGRES_SCHEMA}")
        print(f"   Flask: {cls.FLASK_HOST}:{cls.FLASK_PORT} (Debug: {cls.FLASK_DEBUG})")
        print(f"   ESP32 Servers: {', '.join(cls.ESP32_SERVERS)}")
        print(f"   Log Level: {cls.LOG_LEVEL}")

# Inst√¢ncia global das configura√ß√µes
settings = Settings()

if __name__ == "__main__":
    print("üöÄ Farm Tech Solutions - Configura√ß√µes")
    settings.print_config() 